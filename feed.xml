<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://blog.carlsrm.tech/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.carlsrm.tech/" rel="alternate" type="text/html" /><updated>2020-11-23T11:53:30-06:00</updated><id>https://blog.carlsrm.tech/feed.xml</id><title type="html">CARL Blog</title><subtitle>The official blog of CARL SRM</subtitle><entry><title type="html">Add cross-referencing in your Research Papers and Pdfs created with MS Word</title><link href="https://blog.carlsrm.tech/research%20tips/research/paper%20formatting/2020/11/12/Add-cross-referencing-in-your-paper-pdfs-created-with-MS-Word.html" rel="alternate" type="text/html" title="Add cross-referencing in your Research Papers and Pdfs created with MS Word" /><published>2020-11-12T00:00:00-06:00</published><updated>2020-11-12T00:00:00-06:00</updated><id>https://blog.carlsrm.tech/research%20tips/research/paper%20formatting/2020/11/12/Add-cross-referencing-in-your-paper-pdfs-created-with-MS-Word</id><content type="html" xml:base="https://blog.carlsrm.tech/research%20tips/research/paper%20formatting/2020/11/12/Add-cross-referencing-in-your-paper-pdfs-created-with-MS-Word.html">&lt;p&gt;If you’re here, you’ve in all probability written the first draft of your paper and made a pdf for submission to your favorite journal/conference or open-access repository. Congratulations, pat yourself on the back, the hard part is now behind you. In a series of  blog posts, &lt;strong&gt;I’m going to tell you how you can make your articles easier to read and understand and thus get more cited&lt;/strong&gt;!&lt;/p&gt;

&lt;h2 id=&quot;okay-so-why-do-we-need-in-text-cross-referencing&quot;&gt;Okay! So why do we need in-text cross-referencing?&lt;/h2&gt;

&lt;p&gt;In-text cross referencing is useful whenever you want to make it easier for the reader to reach any position in the document like&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Citations&lt;/strong&gt; to you references in the bibliography section&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sections&lt;/strong&gt; and sub-sections&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tables&lt;/strong&gt; and &lt;strong&gt;Figures&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Sometimes, page numbers (discouraged as it’s easy to overlook relevant page numbers that change at a later stage)&lt;/li&gt;
  &lt;li&gt;Any other position you wish to jump to&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whenever we write a paper, we are spreading knowledge and it’s the duty of a good writer to make the journey as easy, fun and fulfilling for the reader as possible. A big way of doing this will be cross-referencing.&lt;/p&gt;

&lt;p&gt;Word’s internal cross-referencing feature seems to be quite arcane and complicated to use if you’re using some reference manager like Mendeley or Zotero. In this day and age if you’re writing papers, you’re undoubtedly using some reference manager. I couldn’t find any easy way to get this internal cross-referencing to work. &lt;em&gt;Hence I designed a hackish way to get this done in just a few simple steps.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;careful-&quot;&gt;Careful !?&lt;/h2&gt;

&lt;p&gt;You cannot easily modify these links, once created and modifying the citations with Mendeley or Zotero later will NOT update the cross-referencing, completely messing up your document. Hence please make sure you’re doing this as the absolute last stage of typesetting.&lt;/p&gt;

&lt;p&gt;Also keep a saved copy, just in the off-chance, you really need to modify the reference list later.&lt;/p&gt;

&lt;h2 id=&quot;great-tell-me-how-to-do-it&quot;&gt;Great! Tell me how to do it!&lt;/h2&gt;

&lt;p&gt;In this section, we’ll see how we can do cross-referencing for citations in a few simple steps&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If you’re using any reference manager like Mendeley or Zotero, you’d have something called field-codes in your text. You can check it by pressing &lt;code class=&quot;highlighter-rouge&quot;&gt;Alt+F9&lt;/code&gt;. If you see some weird text appearing, those are field codes and it’s recommended to remove them. Select your entire text by pressing &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+A&lt;/code&gt; and then get rid of them by pressing &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+Shift+F9&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To make it easier to see all in-text citations within square-brackets, it’s ideal to highlight all of them and there’s an automated way to do this as well as described &lt;a href=&quot;https://cybertext.wordpress.com/2011/06/20/word-replace-and-reformat-text-inside-square-brackets-using-wildcards/&quot;&gt;here with explanation&lt;/a&gt;. In the off-chance the link disappears, I’d reproduce those steps here:&lt;/p&gt;

    &lt;p&gt;a. Select all text with Ctrl+A.&lt;/p&gt;

    &lt;p&gt;b. Press &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+H&lt;/code&gt; to open the Find and Replace dialog box.&lt;/p&gt;

    &lt;p&gt;c. Click the &lt;code class=&quot;highlighter-rouge&quot;&gt;More&lt;/code&gt; button.&lt;/p&gt;

    &lt;p&gt;d. Select the &lt;code class=&quot;highlighter-rouge&quot;&gt;Use wildcards&lt;/code&gt; check box an select &lt;code class=&quot;highlighter-rouge&quot;&gt;All&lt;/code&gt; in the Search dropdown.&lt;/p&gt;

    &lt;p&gt;e. Put your cursor into the &lt;code class=&quot;highlighter-rouge&quot;&gt;Find what&lt;/code&gt; field.&lt;/p&gt;

    &lt;p&gt;f. Type the following exactly (or copy it from here): &lt;code class=&quot;highlighter-rouge&quot;&gt;(\[)(*)(\])&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;g. Make sure the highlight option is NOT No color.&lt;/p&gt;

    &lt;p&gt;h. Click the &lt;code class=&quot;highlighter-rouge&quot;&gt;Format&lt;/code&gt; button, and select Highlight.&lt;/p&gt;

    &lt;p&gt;i. Click on &lt;code class=&quot;highlighter-rouge&quot;&gt;Replace All&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;If your citations use parenthesis, instead of square-brackets, use &lt;code class=&quot;highlighter-rouge&quot;&gt;\((*)\)&lt;/code&gt; in Step f. Why this works can be found &lt;a href=&quot;https://bioexpressblog.wordpress.com/2014/04/16/highlight-words-enclosed-in-parenthesis-in-ms-word/&quot;&gt;here&lt;/a&gt;. This should select anything within parenthesis including non-citations like &lt;code class=&quot;highlighter-rouge&quot;&gt;(D)&lt;/code&gt;, please ignore those. This does work for compound references like &lt;code class=&quot;highlighter-rouge&quot;&gt;(Author1 1993; Author2 and Author3 2017)&lt;/code&gt;. Word has a bug where if a search fails, consequent searches might also fail, in that case, the best way is to restart the word processor saving the existing changes.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/2020-11-12-Add-cross-referencing-in-your-paper-pdfs-created-with-MS-Word/Highlight.png&quot; alt=&quot;Highlight&quot; title=&quot;Here's how we highlight all our citations.&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Verify it all looks as expected and proceed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In your Bibliography/References section, click on the first reference, on the part &lt;code class=&quot;highlighter-rouge&quot;&gt;[1]&lt;/code&gt;, in between the brackets and press &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+Shift+F5&lt;/code&gt; to insert a bookmark.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Name the reference &lt;code class=&quot;highlighter-rouge&quot;&gt;r01&lt;/code&gt;(to later maintain order for upto 99 references easily) and press &lt;code class=&quot;highlighter-rouge&quot;&gt;Enter&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Repeat step 4 for all your references.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now select the text you want to link to originate from, say the number 1 between the square brackets, and click &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+K&lt;/code&gt;, select &lt;code class=&quot;highlighter-rouge&quot;&gt;Place in This Document&lt;/code&gt; in the left pane and click on the bookmark &lt;code class=&quot;highlighter-rouge&quot;&gt;r01&lt;/code&gt;. Make sure text to display shows the selected text, ie. the number 1 here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Repeat Step 6 for all highlighted occurrences. For references like [17-19], add only one link from &lt;code class=&quot;highlighter-rouge&quot;&gt;17-19&lt;/code&gt; to bookmark &lt;code class=&quot;highlighter-rouge&quot;&gt;r17&lt;/code&gt; and for [37-40,45], add one link from &lt;code class=&quot;highlighter-rouge&quot;&gt;37-40&lt;/code&gt; to bookmark &lt;code class=&quot;highlighter-rouge&quot;&gt;r37&lt;/code&gt; and one from &lt;code class=&quot;highlighter-rouge&quot;&gt;45&lt;/code&gt; to bookmark &lt;code class=&quot;highlighter-rouge&quot;&gt;r45&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/2020-11-12-Add-cross-referencing-in-your-paper-pdfs-created-with-MS-Word/Bookmark.png&quot; alt=&quot;Bookmark&quot; title=&quot; Here's how we create a Bookmark.&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Remove all the highlights and probably the link decorations with blue fonts and underlines as well. Research papers have uniform font settings. So select &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+A&lt;/code&gt;, remove the highlights, select the font color as Black and press &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+U&lt;/code&gt; twice to remove underlines.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here we’ve primarily covered only cross-referencing citations with references, but this can be easily extended to sections, subsections, tables, figures or any other place in the document by bookmarking at that location with &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+Shift+F5&lt;/code&gt; , naming it and pressing &lt;code class=&quot;highlighter-rouge&quot;&gt;Enter&lt;/code&gt;. Then just go to the place where the link should originate and press &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+K&lt;/code&gt; and add the destination as the correct bookmark. I usually use the naming convention of &lt;code class=&quot;highlighter-rouge&quot;&gt;r01...&lt;/code&gt; for references, &lt;code class=&quot;highlighter-rouge&quot;&gt;f01...&lt;/code&gt; for figures, &lt;code class=&quot;highlighter-rouge&quot;&gt;t01...&lt;/code&gt; for tables, &lt;code class=&quot;highlighter-rouge&quot;&gt;s01...&lt;/code&gt; for sections and &lt;code class=&quot;highlighter-rouge&quot;&gt;ss01...&lt;/code&gt; for sub-sections, but feel free to use any convention you want.&lt;/p&gt;

&lt;h2 id=&quot;here-are-some-researchers-and-their-papers-using-this-method&quot;&gt;Here are some researchers and their Papers using this Method&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://orcid.org/0000-0002-4351-2108&quot;&gt;A. J. Paul&lt;/a&gt;, “&lt;a href=&quot;https://arxiv.org/abs/2009.11225v2&quot;&gt;Randomised fast no-loss expert system to play tic-tac-toe like a human&lt;/a&gt;,” Cogn. Comput. Syst., Sep. 2020, doi: &lt;a href=&quot;https://doi.org/10.1049/ccs.2020.0018&quot;&gt;10.1049/ccs.2020.0018&lt;/a&gt;. &lt;em&gt;Click on the paper title to reach the ArXiv v2 of the paper typeset by the author, with this method.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;… and many more to come!!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;congratulations-&quot;&gt;Congratulations !!&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;You’ve made your first cross-referenced pdf in MS Word!&lt;/em&gt;&lt;/strong&gt; Do note cross-referencing might not appear to work on some mobile pdf viewers even if it is enabled in the pdf, but does work on the Desktop, with Adobe, Google Chrome etc.&lt;/p&gt;

&lt;p&gt;If you know such a free tool exists to do this for MS Word documents, do drop it in the comments, and we’d love to mention it here. In future, someone might create a script/macro for this, making it even easier. If you create that, or know someone who does, do reach out to us in the comments, we’d love to give it a shoutout and even go and make a post about it benefitting researchers across the globe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Finally, if this article helped you, we’d love to hear about it in the comments and if you have used it in a paper, we’d love to feature your paper here as well.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name>Aditya Jyoti Paul</name></author><summary type="html">If you’re here, you’ve in all probability written the first draft of your paper and made a pdf for submission to your favorite journal/conference or open-access repository. Congratulations, pat yourself on the back, the hard part is now behind you. In a series of blog posts, I’m going to tell you how you can make your articles easier to read and understand and thus get more cited!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.carlsrm.tech/images/2020-11-12-Add-cross-referencing-in-your-paper-pdfs-created-with-MS-Word/frontimage.jpg" /><media:content medium="image" url="https://blog.carlsrm.tech/images/2020-11-12-Add-cross-referencing-in-your-paper-pdfs-created-with-MS-Word/frontimage.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">A Quick Overview of QUIC and HTTP/3</title><link href="https://blog.carlsrm.tech/quic%20%20http3/web/2020/11/10/A-Quick-Overview-of-QUIC-and-HTTP3.html" rel="alternate" type="text/html" title="A Quick Overview of QUIC and HTTP/3" /><published>2020-11-10T00:00:00-06:00</published><updated>2020-11-10T00:00:00-06:00</updated><id>https://blog.carlsrm.tech/quic%20%20http3/web/2020/11/10/A-Quick-Overview-of-QUIC-and-HTTP3</id><content type="html" xml:base="https://blog.carlsrm.tech/quic%20%20http3/web/2020/11/10/A-Quick-Overview-of-QUIC-and-HTTP3.html">&lt;p&gt;It’s quite evident how much we are dependent on the web. While some of us brag about being web developers, others are still intimidated by the information the web overflows us with. Ever wondered how the web works behind the scenes?&lt;/p&gt;

&lt;h3 id=&quot;what-really-happens-when-you-hit-wwwjohndoecom&quot;&gt;What really happens when you hit www.johndoe.com?&lt;/h3&gt;

&lt;p&gt;I’ll try to keep it as simple as possible, so here it goes—  every domain name is associated with an IP address that the web understands. When you enter &lt;em&gt;www.johndoe.com&lt;/em&gt;, it initially looks up for its IP address in the browser cache. If it is not found in browser cache, it looks up for it in the router cache and ISP cache.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-11-10-A-Quick-Overview-of-QUIC-and-HTTP3/johndoe.com.png&quot; alt=&quot;johndoe.com&quot; title=&quot;What happens when you click on johndoe.com&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If the above steps don’t return the IP address, it is then requested to the root server which tells you from where you can get the information, i.e top level domain (TLD). The TLD let’s you know the IP address of your domain name (search input) and then you can initiate a connection with the domain.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-11-10-A-Quick-Overview-of-QUIC-and-HTTP3/TCP_3_Way_Handshake.png&quot; alt=&quot;TCP 3-Way Handshake&quot; title=&quot;TCP 3-Way Handshake&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The connection is established in three steps and is known as &lt;a href=&quot;https://docs.microsoft.com/en-us/troubleshoot/windows-server/networking/three-way-handshake-via-tcpip&quot; title=&quot;TCP 3-way handshake&quot;&gt;TCP 3-way handshake&lt;/a&gt;. After successfully connecting with the server, you can then communicate with the domain and send requests according to your needs.&lt;/p&gt;

&lt;p&gt;To understand the web, we have put some layers to how this awesome sequence works out. The Open Systems Interconnection (OSI) model acts as a  reference tool for understanding  communication and transfer of data between systems in a network. The OSI model comprises seven layers, each layer performing specific functions to support its neighboring layers. This layered stack basically provides flexibility, and hence these layers are quite loosely coupled.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020-11-10-A-Quick-Overview-of-QUIC-and-HTTP3/Layers_of_OSI.png&quot; alt=&quot;OSI Layers&quot; title=&quot;7 Layers OSI&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Physical Layer: It consists of physical devices such as &lt;em&gt;hubs, repeaters, modems,&lt;/em&gt; etc. which are responsible for the transfer of raw unstructured data in the form of &lt;a href=&quot;https://web.stanford.edu/class/cs101/bits-bytes.html&quot; title=&quot;bits&quot;&gt;bits&lt;/a&gt;. It defines the topology of devices in a network and transmits data by converting the digital bits into electrical, optical, or radio signals.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Data Link Layer: It comprises networking components such as &lt;em&gt;NIC, Ethernet,&lt;/em&gt; etc. to ensure error-free transmission of data between the nodes in a network. It has two sub-layers, Medium Access Control (MAC) layer that helps in flow control and multiplexing of nodes over the network, and Logical Link Control (LLC) layer that provides flow and error control along with identification of network layer protocols.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Network Layer: Devices like &lt;em&gt;routers&lt;/em&gt; work at the network layer to assign the destination address in the packet headers. The routers are responsible for finding the optimal path from the available multiple paths to send the data to the desired destination.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Transport Layer: This layer consists of protocols like &lt;em&gt;Transmission Control Protocol (TCP)&lt;/em&gt; and &lt;em&gt;User Datagram Protocol (UDP)&lt;/em&gt; that help in end-to-end delivery of data in the form of small units called &lt;a href=&quot;https://www.geeksforgeeks.org/difference-between-segments-packets-and-frames/&quot; title=&quot;segments&quot;&gt;segments&lt;/a&gt;. It is responsible for the sequencing and reassembling of segmented data along with error control.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Session Layer: Implementations of session layer include &lt;em&gt;Zone Information Protocol (ZIP)&lt;/em&gt; and &lt;em&gt;Session Control Protocol (SCP)&lt;/em&gt; that make use of remote procedure calls (RPC). Session layer is responsible for the establishment, maintenance, authentication and security between end user application processes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Presentation Layer: Also known as syntax layer, it translates data into the form that the application accepts. It also assists in compression and encryption of the data if required by the application layer. Protocols like &lt;em&gt;Secured Socket Layer (SSL)&lt;/em&gt; and &lt;em&gt;File Transfer Protocol (FTP)&lt;/em&gt; are implemented at the presentation layer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Application Layer: This layer is the closest to the user and hence includes applications like &lt;em&gt;Telnet&lt;/em&gt; and &lt;em&gt;Simple Mail Transfer Protocol (SMTP)&lt;/em&gt;. Application layer identifies resource availability, communication partners and synchronizes communication. Hence it acts as a window for application services to access the network and display the information received by lower layers to the user.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before we understand what is QUIC, we need to understand what problems it solves.&lt;/p&gt;

&lt;h3 id=&quot;http-1--http-2&quot;&gt;HTTP 1 → HTTP 2&lt;/h3&gt;

&lt;p&gt;If you’re using HTTP 1, your browser would be opening parallel connections to open up things at the same time. It doesn’t actually circumvent the &lt;a href=&quot;https://en.wikipedia.org/wiki/Head-of-line_blocking&quot; title=&quot;head-of-line blocking&quot;&gt;head-of-line blocking&lt;/a&gt; problems, but surely makes them occur less frequently. It works well for the HTTP 1 but it certainly has its overheads, as it has to set-up as well as maintain all those numerous connections. By and large, HTTP 1 has three main issues:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;TCP head-of-the-line blocking&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP head-of-the-line blocking&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;4-RTT connection setup&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If our connection set-up is slow, and we incur packet loss, other packets can be blocked even though they might have arrived at the client, and if we have a slow first resource on HTTP, then it can also block the things lined behind it. The last two have solutions inferred, but they themselves have a lot of overhead by itself.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.42gears.com/blog/why-its-time-to-enable-tls-1-2/&quot; title=&quot;TLS 1.2&quot;&gt;TLS 1.2&lt;/a&gt; had made a total of 4 round trips in order to set up secured connections. To optimize this time trade-off, the simplest thing to do was to do two things in one round trip. It was possible to implement this in some scenarios of TLS 1.2 and was the default for &lt;a href=&quot;https://wiki.openssl.org/index.php/TLS1.3&quot; title=&quot;TLS 1.3&quot;&gt;TLS 1.3&lt;/a&gt;, its successor, having a total of 3 round trips. To optimize this even closer, the TCP and TLS could work together by pulling out some strings, and this technology was called &lt;a href=&quot;https://en.wikipedia.org/wiki/TCP_Fast_Open#:~:text=In%20computer%20networking%2C%20TCP%20Fast,TCP&quot; title=&quot;TCP Fast Open&quot;&gt;TCP Fast Open&lt;/a&gt;, where the user could send some extra data in the initial SYN packet. This was also beneficial as we were able to achieve twice the performance that we initially had and now what really was needed was a holy grail, to perform everything in just one single task. Along with the TLS evolution, HTTP went under transformation too. From the journey of HTTP 1.1 to HTTP 2, it solved the head-of-the-line blocking problem as it became better and smarter.&lt;/p&gt;

&lt;p&gt;Now after these amazing transformations, all we wish was the ability of HTTP to perform multiple things at once. This certainly wasn’t feasible on HTTP 1, as it sends all the information in one big block without any demarcation to which resources the individual blocks belong to. 
This was achieved by &lt;em&gt;multiplexing&lt;/em&gt;. Hence, HTTP 2 solves two problems at once - the HTTP head-of-the-line blocking problem and the overhead of the mitigation as seen above.&lt;/p&gt;

&lt;p&gt;Yet, the TCP head-of-the-line blocking problem in regards to the loss of packet isn’t resolved. However, it was observed that &lt;a href=&quot;https://www.researchgate.net/publication/308873246_Is_HTTP2_really_faster_than_HTTP11&quot; title=&quot;speed analysis&quot;&gt;HTTP 2 can be 5 times slower than HTTP 1&lt;/a&gt; on a network with packet traffic. By now, you might be thinking that this can be resolved by introducing a new version as in previous use cases. Yet we know that there exists no TCP 2.0 . The reason being, that TCP is too popular and widespread to be modified. According to the definitions of the Internet, we all know that it is an interconnection of several devices. Now, these devices are running on their own implementations of TCP. This means, that if we try to change these TCP implementations, there is a high probability that we break some of these &lt;a href=&quot;https://en.wikipedia.org/wiki/Middlebox&quot; title=&quot;middle-box&quot;&gt;middle-box&lt;/a&gt; implementations, and hence if we wish to modify these, we have to wait until all these humongous implementations have added support for it before we can actually deploy it at a large scale.&lt;/p&gt;

&lt;p&gt;On the whole, in order to solve the TCP head-of-the-line problem, we can either wait for a whole another decade so that everyone is on the same boat, or, we can make a bold choice, that TCP isn’t evolvable anymore and hence needs a replacement.&lt;/p&gt;

&lt;h3 id=&quot;enter-udp&quot;&gt;Enter UDP&lt;/h3&gt;

&lt;p&gt;UDP isn’t like the TCP at all. It is fast and doesn’t care about the packet loss. 
&lt;img src=&quot;/images/2020-11-10-A-Quick-Overview-of-QUIC-and-HTTP3/TCP_vs_UDP.png&quot; alt=&quot;TCP vs UDP&quot; title=&quot;TCP vs UDP&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ieeexplore.ieee.org/document/8537265&quot; title=&quot;QUIC&quot;&gt;QUIC&lt;/a&gt; still uses TLS 1.3 . It still has that zero RTT goodness, it is built on top of UDP, and uses the HTTP 2 semantics. QUIC incorporates the multiplexing from HTTP 2 and re-implements in-order reliability on top of UDP custom top packet loss recovery logic.
&lt;img src=&quot;/images/2020-11-10-A-Quick-Overview-of-QUIC-and-HTTP3/Layers_of_QUIC.png&quot; alt=&quot;Layers of QUIC&quot; title=&quot;Layers of QUIC&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This means that in QUIC if one packet is facing problems, others don’t have to be blocked due to it. Thus solving the TCP head-of-the-line problem! For solving this one problem, it is evident that a lot of effort is required at the backend. Also we know that HTTP 2 and TLS 1.3 work absolutely fine on TCP as well. So, the question arises: was it really worth the effort to solve that one TCP head-of-the-line blocking problem? The answer is &lt;strong&gt;NO&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Hence while developing QUIC, the developers strived to solve all the other problems as well. Consequently, QUIC is an amalgamation of everything one has known about networks over the past three decades. It’s like Christmas in a bowl!&lt;/p&gt;

&lt;h3 id=&quot;additional-features-of-quic&quot;&gt;Additional features of QUIC&lt;/h3&gt;

&lt;h4 id=&quot;focuses-on-security&quot;&gt;Focuses on security&lt;/h4&gt;
&lt;p&gt;One of the major  deviations of QUIC from the vulnerable TCP is its design goal of providing a secure-by-default transport protocol. QUIC achieves this by providing security features, like encryption and authentication, that are usually managed by higher layer protocols like TLS from the transport protocol itself.&lt;/p&gt;

&lt;h4 id=&quot;prevents-middle-box-meddling-through-encryption&quot;&gt;Prevents middle box meddling through encryption&lt;/h4&gt;
&lt;p&gt;QUIC is more flexible than TCP and encrypts everything including its own metadata. Therefore the less these middle boxes get to see, the lesser they can modify. This  is indeed useful for QUIC and its users, but not for the people who make these middle boxes. A lot of deliberation has been made just to come to a conclusion whether a single bit should be visible to the middle boxes or not.&lt;/p&gt;

&lt;h4 id=&quot;connection-id-and-multipath&quot;&gt;Connection ID and multipath&lt;/h4&gt;
&lt;p&gt;It provides easy switching over networks. QUIC takes into account how people actually use the Internet in daily life, for say, when one is at home they are usually on WiFi, but once they step out, they switch to 4G. This closes down the TCP connection they would have established and reconnects as they now have a new IP address. However, in QUIC this is not so tiresome. QUIC instead assigns you a unique connection ID that remains the same irrespective of how many times you change your IP address. Icing on the cake, it also has the capability to use WiFi and 4G both at the same time; two networks along with extra bandwidth, which is the idea behind multipath)&lt;/p&gt;

&lt;h4 id=&quot;custom-congestion-control&quot;&gt;Custom congestion control&lt;/h4&gt;
&lt;p&gt;It is the mechanism that prevents you from overloading the network by sending too much data. TCP has this feature as well, but it is not fairly optimal. It uses a single general-purpose algorithm and uses it for all types of connection. But it is not so generalized in case of QUIC. For instance, like a NETINFO API that lets you see what connection you’re currently using and how much bandwidth you have, it provides the perfect micro optimization for individual user and connection types for the exact moment, and even for the exact page one is trying to serve them, which makes HTTP 2 server push more practically applicable.&lt;/p&gt;

&lt;h3 id=&quot;quic-performance-check&quot;&gt;QUIC Performance Check&lt;/h3&gt;

&lt;p&gt;After the plethora of features that QUIC empowers us with, how much performance gain can we actually expect? And the answer is, WE DON’T KNOW! QUIC was originally developed by Google a couple of years ago. They initially deployed QUIC on their servers, and on Chrome, and is currently &lt;a href=&quot;https://www.ietfjournal.org/quic-bringing-flexibility-to-the-internet/&quot; title=&quot;QUIC and the Internet&quot;&gt;serving 7% of the total Internet&lt;/a&gt; space. QUIC hence has been battle-tested, but, only by Google. Google; the name eventually comes with trust. We like Google. If Google says something works, we say “standardize it”. This was the story of QUIC in a nutshell over past years. When we got the new &lt;a href=&quot;https://mailarchive.ietf.org/arch/msg/quic/RLRs4nB1lwFCZ_7k0iuz0ZBa35s/&quot; title=&quot;IEFT and QUIC&quot;&gt;IEFT version&lt;/a&gt; of QUIC, although it was similar to Google’s version in concept, yet it was changed to a great extent in terms of its implementation. There are several implementations of it, but none of them is even remotely ready for any type of performance testing, let alone browser integration.&lt;/p&gt;

&lt;h3 id=&quot;lets-talk-numbers&quot;&gt;Let’s talk numbers&lt;/h3&gt;

&lt;p&gt;According to Google, they found 3.6 - 8% improvement on an average over desktop and mobile devices. I’d be lying if I say I wasn’t disappointed by this. But these numbers represent an average. In 99% percentile, it shows an improvement of over 14-16%, which is indeed impactful. It might be quite evident by now that most of this improvement is due to the 0 RTT. But, one can see the 0 RTT only on servers that you’ve somehow seen/accessed before. When using mobile devices, one is likely to move around and hence Google load balances might send them to different data centers that they’ve never been before. This certainly justifies the unequal improvement rates over desktop and mobile devices.&lt;/p&gt;

&lt;p&gt;Before you completely get all carried away in the numbers and wondering if QUIC really changed your life, let me recall for you why at the first place we switched to QUIC; and the answer is lossy networks, which is often misinterpreted as loss due to congestion. According to Google statistics, QUIC witnessed &lt;a href=&quot;https://research.google/pubs/pub46403/&quot; title=&quot;video buffering&quot;&gt;20% less video buffering&lt;/a&gt; on contents in India. Another &lt;a href=&quot;https://www.researchgate.net/publication/318801580_QUIC_Better_for_what_and_for_whom&quot; title=&quot;reference paper&quot;&gt;paper&lt;/a&gt; shows that there is a 14% of actual page load time improvement in the actual browser, which sounds pretty good. A &lt;a href=&quot;https://www.researchgate.net/publication/302585207_How_quick_is_QUIC&quot; title=&quot;conference paper&quot;&gt;conference paper&lt;/a&gt; tested QUIC with and without packet loss, and ofcourse QUIC is going to be comparatively slower with packet loss, but only 20% as compared to the 200% of HTTP/2 in most cases. Ok wow. But there are always two sides of a coin. You might be wondering why am I not citing other papers but quote the exact opposite results to the one cited till now. Well, hold your beer, here they come. There is one &lt;a href=&quot;https://www.researchgate.net/publication/317639523_Not_so_QUIC_A_Performance_Study_of_DASH_over_QUIC&quot; title=&quot;reference paper&quot;&gt;paper&lt;/a&gt; that says that QUIC is terrible for video streaming, with around 75% less Mbps than TCP for DASH streaming. Another &lt;a href=&quot;https://www.researchgate.net/publication/321068535_Taking_a_long_look_at_QUIC_an_approach_for_rigorous_evaluation_of_rapidly_evolving_transport_protocols&quot; title=&quot;conference paper&quot;&gt;conference paper&lt;/a&gt; says that if you have an inconsistent latency which causes packets to be re-ordered, QUIC is 100% than TCP. An old &lt;a href=&quot;https://www.researchgate.net/publication/280547975_HTTP_over_UDP_an_experimental_investigation_of_QUIC&quot; title=&quot;reference paper&quot;&gt;paper&lt;/a&gt; says that QUIC can have 30% slower page load time if it incurs packet loss and low bandwidth.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So where are we in terms of final QUIC and HTTP/3 deployment in the world? It is expected that we will see rapidly increased rollouts of QUIC and HTTP/3 by clients by the end 2020, as well as higher volume testing on pre-release channels. I will be followed by clients turning QUIC and HTTP/3 on in their stable releases. Furthermore, it is believed  that QUIC and HTTP/3 will become the de-facto mainstream web protocol stack in 2021.&lt;/p&gt;

&lt;h3 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://quiche.googlesource.com/quiche&quot; title=&quot;QUICHE&quot;&gt;QUICHE&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://storage.googleapis.com/pub-tools-public-publication-data/pdf/8b935debf13bd176a08326738f5f88ad115a071e.pdf&quot; title=&quot;Design and Internet scale deployemnt&quot;&gt;Design and Internet scale deployemnt&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.csoonline.com/article/3564253/6-ways-http-3-benefits-security-and-7-serious-concerns.html&quot; title=&quot;HTTP/3 Security&quot;&gt;HTTP/3 Security&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;author&quot;&gt;Author&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/shubhangi-singh21&quot; title=&quot;GitHub profile&quot;&gt;Shubhangi Singh&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;</content><author><name>Shubhangi Singh</name></author><summary type="html">It’s quite evident how much we are dependent on the web. While some of us brag about being web developers, others are still intimidated by the information the web overflows us with. Ever wondered how the web works behind the scenes?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.carlsrm.tech/images/2020-11-10-A-Quick-Overview-of-QUIC-and-HTTP3/Preview_Image.png" /><media:content medium="image" url="https://blog.carlsrm.tech/images/2020-11-10-A-Quick-Overview-of-QUIC-and-HTTP3/Preview_Image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How sharp is your Memory? Check it with this Memory Game</title><link href="https://blog.carlsrm.tech/speech%20recognition/python/pyttsx3/2020/08/20/how-sharp-is-your-memory.html" rel="alternate" type="text/html" title="How sharp is your Memory? Check it with this Memory Game" /><published>2020-08-20T00:00:00-05:00</published><updated>2020-08-20T00:00:00-05:00</updated><id>https://blog.carlsrm.tech/speech%20recognition/python/pyttsx3/2020/08/20/how-sharp-is-your-memory</id><content type="html" xml:base="https://blog.carlsrm.tech/speech%20recognition/python/pyttsx3/2020/08/20/how-sharp-is-your-memory.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Hey! This is Sanskriti. Hope you all are doing well in this lockdown and using your time well to do productive things. So one of these days, my younger cousin wanted to play something with me, we were on a call. I remembered the memory game I used to play with my mom when I was a kid. My mom used to say the name of an object, I had to add one more object to the list, likewise we had to remember all the old objects in the list in the order and also add the new one. I started playing this game with my cousin but after some time, we both started forgetting the list and neither of us couldn’t point out the mistakes of each other, therefore we didn’t have a winner. So that day I decided to computerise this game with speech integration. This could solve two problems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Computer’s memory is definitely better than human memory, so you won’t have to care about the right order to tally your responses with.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you don’t have a partner to play along with you, you could play it with the computer. So making the traditional memory game that we have been playing since childhood more interactive, fun and easy to play!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog_1/memory_game_flowchart.jpeg&quot; alt=&quot;&quot; title=&quot;Flowchart&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-1-generate-random-numbers-and-append-them-in-a-list&quot;&gt;Step 1: Generate random numbers and append them in a list&lt;/h2&gt;

&lt;p&gt;To develop this game, the first step was to automate the generation of random numbers that were supposed to be memorised by the player. So I wrote a script in python and used an inbuilt function randint() of the random module(available in the latest versions of python i.e, python 3 onwards). Here, I have given the code snippet to print the whole sequence of numbers, but in the actual game, I have printed only the last number of the list. Rest of the numbers stay in list for verification with the user’s input but are not printed.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#generate random number
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;how-are-random-integers-generated&quot;&gt;How are random integers generated?&lt;/h3&gt;

&lt;p&gt;Even the most random data generated with Python is not fully random in the scientific sense. It is pseudorandom, generated with a pseudorandom number generator (PRNG). It starts with a random number, known as the seed, and generates a pseudo-random sequence by performing some operation on that value. Each seed value will correspond to a sequence of generated values for a given random number generator. That is, if you provide the same seed twice, you get the same sequence of numbers twice.&lt;/p&gt;

&lt;p&gt;The randint() function uses the &lt;a href=&quot;https://github.com/python/cpython/blob/master/Modules/_randommodule.c&quot;&gt;Mersenne Twister&lt;/a&gt; PRNG algorithm and takes system current time as the seed so the value of seed keeps changing at every execution of the program. The randint() function can take two integer arguments , a start number and an end number, both inclusive. The function then generates numbers only in this range.&lt;/p&gt;

&lt;h2 id=&quot;step-2-clear-the-output-from-screen&quot;&gt;Step 2: Clear the output from screen&lt;/h2&gt;

&lt;p&gt;Next step was to clear the output (randomly-generated numbers) from the console after a few seconds for which I used time.stay() function from time library, again an in-built library in python and clear_output() function from IPython.display library. I added these two functions inside the while loop so that the old output gets cleared in every new level.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;IPython.display&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clear_output&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#generate random number
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;clear_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;step-3-recognising-speech&quot;&gt;Step 3: Recognising speech&lt;/h2&gt;

&lt;p&gt;The most important step was to now integrate a speech recognition module with the game. For that, first you need to download the module, I did it using my pip installer. However, PyAudio Module is a dependency for the SpeechRecognition, and unfortunately you cannot download it directly using pip installer, you will need to use pipwin. After installing the modules, you need to create a function that can be reused to take the input from the user as and when required and compare it to the sequence we have already defined. I used speech recognition by Google API since it gives you the default API key for free. Therefore, an active internet connection is necessary throughout the game to play.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Special tip:&lt;/strong&gt;  &lt;em&gt;Consider using a try and except block wherever possible so that if anything ever goes wrong, you have a chance to continue the script by returning the same function&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here, in the try block, I have typecasted the audio recognized as integer type, so that if due to some error in recognition, a string is recogised by the google cloud, the exception block would catch it and return the recogise() function again.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;speech_recognition&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Recognizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;recognise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Microphone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Speak the number&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;audio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You said &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Didn't get you, can you say it again?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recognise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;how-is-your-voice-recognized&quot;&gt;How is your voice recognized??&lt;/h3&gt;

&lt;p&gt;Firstly, your speech is converted from physical sound to an electrical signal with a microphone, and then to digital data with an analog-to-digital converter. Then, powerful neural network models are used to transform the features and reduce the dimensionality of signals to simplify the speech. Voice activity detectors (VADs) are also used to reduce an audio signal to only the portions that are likely to contain speech. This prevents the recognizer from wasting time analyzing unnecessary parts of the signal.&lt;/p&gt;

&lt;p&gt;In the modern speech recognition models like the &lt;a href=&quot;https://en.wikipedia.org/wiki/Hidden_Markov_model&quot;&gt;Hidden Markov Model&lt;/a&gt;, the speech signal is divided into 10-millisecond fragments so that it can be approximated as a stationary process. The power spectrum of each fragment, (a plot of the signal’s power as a function of frequency) is mapped to a vector of real numbers known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Cepstrum&quot;&gt;cepstral&lt;/a&gt; coefficients. The final output of the HMM is a sequence of these vectors.&lt;/p&gt;

&lt;p&gt;To decode the speech into text, groups of vectors are matched to one or more &lt;a href=&quot;https://en.wikipedia.org/wiki/Phoneme&quot;&gt;phonemes&lt;/a&gt;—a fundamental unit of speech. This calculation requires training, since the sound of a phoneme varies from speaker to speaker. A special algorithm is then applied to determine the most likely word (or words) that produce the given sequence of phonemes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog_1/speech_recognition_flowchart.jpeg&quot; alt=&quot;&quot; title=&quot;Voice Recognition Steps courtesy Packt Publishing&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-4-making-the-computer-interact-with-player&quot;&gt;Step 4: Making the computer interact with player&lt;/h2&gt;

&lt;p&gt;The last step was to make the game more interactive. So, I had used the pyttsx3 module. It is a module that converts string text into speech. You can also set the properties of th e computer voice using the function setproperty(), you can change several attributes of speech, male/female voice, speed, and many other things as per your requirements in a function. Next you directly need to call the function wherever you want in the program, passing the text to be spoken as an argument.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyttsx3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyttsx3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'rate'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;220&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;voices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'voices'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'voice'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;voices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runAndWait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Hope you enjoy building and playing this game. You can check my github repo &lt;a href=&quot;https://github.com/sanskritikhare142/Memory-game-using-speech&quot;&gt;github repo&lt;/a&gt; for the complete code.&lt;/p&gt;

&lt;p&gt;Let me know how you renovate the game and take it forward.&lt;/p&gt;

&lt;p&gt;Stay home, Stay safe and keep improving your memory! :)&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;Sanskriti Khare&lt;/p&gt;</content><author><name>Sanskriti Khare</name></author><summary type="html">Introduction</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.carlsrm.tech/images/blog_1/memory_game.jpg" /><media:content medium="image" url="https://blog.carlsrm.tech/images/blog_1/memory_game.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>